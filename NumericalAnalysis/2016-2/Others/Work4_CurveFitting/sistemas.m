#{
Resolver um exercicio do cap. 7 (Ajustes) e outro do cap. 8 (Integração), conforme numero do seu grupo:

numerogrupo=15

if (mod(numerogrupo,4)==0) numeroexerciciocap7=4 else numeroexerciciocap7=mod(numerogrupo,4) end

if (mod(numerogrupo,7)==0) numeroexerciciocap8=7 else numeroexerciciocap8=mod(numerogrupo,7) end

--------------------------------------------------------------------------------------------------

Ex. numerogrupo = 15

numeroexerciciocap7 = 3
numeroexerciciocap8 = 1

#}


clc
clear
close all

more off
format long
split_long_rows(0)

#format rat
#output_precision(30)
#output_max_field_width(0)

# addpath( 'Maclaurin' )


printf( "\nGrupo 19, exercícios 7 = 3, 8 = 5\n\n" )
printf( "ExemplodeGrupo.m\n" )
printf( "numerogrupo=19\n" )
printf( "if (mod(numerogrupo,4)==0) numeroexerciciocap7=4 else numeroexerciciocap7=mod(numerogrupo,4) end\n" )
printf( "if (mod(numerogrupo,7)==0) numeroexerciciocap8=7 else numeroexerciciocap8=mod(numerogrupo,7) end\n" )




printf( "\n\n\n##############################################################################################################\n" )
printf( "##############################################################################################################\n" )

printf( "\n7.3). A tabela abaixo relaciona, experimentalmente, a medição do volume de álcool gerado em uma\n" )
printf( "mistura em função da sua temperatura de reação:\n" )
printf( "Temperatura(oC) 13.9 37.0 67.8 79.0 85.5 93.1 99.2\n" )
printf( "Volume    (cm3) 1.04 1.18 1.29 1.35 1.28 1.21 1.06\n" )
printf( "" )

printf( "\n\n\n7.3a). Determine funções representativas dos pontos tabelados por ajuste de curvas na faixa medida\n" )
printf( "(sugestão use função polinomial de grau n=1 e 2).\n" )
printf( "\n" )

% Construcao do sistema do ajuste polinomial
function a = fdetajustePn(n,m,x,y)

    %N. de equacoes e incognitas
    neq = n+1;

    for i=1:neq

        for j=1:neq

            soma1 = 0;

            for k=1:m

                soma1 = soma1 + (x(k))^(i+j-2);

            end %k

            A(i,j)=soma1;

        end %j

        soma2 = 0;

        for k=1:m

            soma2 = soma2 + y(k)*(x(k))^(i-1);

        end %k

        b(i) = soma2;

    end %i

    [A transpose(b)];
    a = fCholesky(neq,A,b);

end

%Pn(xi)=a(1)+a(2)*xi+a(3)*xi^2+...+a(n)*xi^(n-1)+a(n+1)*xi^n
%Pn(xi)=a(1)+xi*(a(2)+xi*(a(3)+...+xi*(a(n)+xi*a(n+1))...))% HORNER
function y=fPnH(n,a,xi)

    %calcula y p/ cada elemento de xi
    for ip=1:length(xi)

        y(ip)=a(n+1);

        for i=n:-1:1

            y(ip)=a(i)+y(ip)*xi(ip);

        end

    end

end

function D=fdesvioPn(n,a,m,x,y)

    D=0;

    for k=1:m

        D=D+(fPnH(n,a,x(k))-y(k))^2;

    endfor

end

function R2=fCoefDeterminacaoPn(n,a,m,x,y)

    %valor médio
    ym=0;

    for k=1:m

        ym=ym+y(k);

    end

    ym=ym/m;
    SQT=0;

    %soma dos quadrados totais
    for k=1:m

       SQT=SQT+(y(k)-ym )^2;

    end

    SQE=0;

    %soma do quadrado dos residuos
    for k=1:m

        SQE=SQE+(y(k)-fPnH(n,a,x(k)))^2;

    end

    %coeficiente de determinação simplificado
    R2=1-SQE/SQT;

end

% Algoritmo de Cholesky
%Matriz de coeficientes simétrica, positiva definida, de ordem n x n
function x=fCholesky(n,a,b)

    k=1;
    L(1,1)=sqrt(a(1,1));

    for i=2:n

        L(i,1)=a(i,1)/L(1,1);

    endfor

    for k=2:n-1

        soma=0;

        for r=1:k-1

            soma=soma+L(k,r)^2;

        endfor %r

        L(k,k)=sqrt(a(k,k)-soma);

        for i=k+1:n

            soma=0;

            for r=1:k-1

                soma=soma+L(i,r)*L(k,r);

            endfor %r

            L(i,k)=(a(i,k)-soma)/L(k,k);

        endfor %i

    endfor %k

    k=n;
    soma=0;

    for r=1:k-1

        soma=soma+L(k,r)^2;

    endfor %r

    L(k,k)=sqrt(a(k,k)-soma);

    % Resolvendo o sistema para o termo independente b
    %L.C=b
    c(1)=b(1)/L(1,1);

    for i=2:n

        soma=0;

        for j=1:i-1

            soma=soma+L(i,j)*c(j);

        end

        c(i)=(b(i)-soma)/L(i,i);

    end

    %U*X=C ->LT*X=C
    x(n)=c(n)/L(n,n);

    for i=n-1:-1:1
        soma=0;

        for j=i+1:n

            soma=soma+L(j,i)*x(j);%Note o uso da matriz U=transposta de L

        end

        x(i)=(c(i)-soma)/L(i,i);

    end

end


# Algoritmo de ajuste polinomial (Ex. 7.2):

clear
clc
format long

x=[ 13.9, 37.0, 67.8, 79.0, 85.5, 93.1, 99.2 ];
y=[ 1.04, 1.18, 1.29, 1.35, 1.28, 1.21, 1.06 ];

%Numero de pontos experimentais
m = numel( x );

xinicial=min(x);
xfinal  =max(x);

% Numero de intervalos para analise e plotagem
np= 64;

% Valor espaçamento de cada intervalo para plotagem
hp=(xfinal-xinicial)/np;

% Valores dos 'np+1' pontos xp(k) (k=1:np+1)
xp=xinicial:hp:xfinal;

%
% Aproximação de função por Ajuste de curvas (INDICADA PARA PONTOS EXPERIMENTAIS)
%

% Ajuste a um polinomio de 1. grau, escolhido em função de seu comportamento grafico;
n=1;
m;
coefficientsForPn1=fdetajustePn(n,m,x,y);

% Calculo dos valores do polinomio ajustado em todos os xp
ya1                       = fPnH( n, coefficientsForPn1, xp );
desvioParaP1              = fdesvioPn( n, coefficientsForPn1, m, x, y );
coeficienteDeterminacaoR1 = fCoefDeterminacaoPn( n, coefficientsForPn1, m, x, y );

n
coefficientsForPn1


% Ajuste a um polinomio de 2. grau, escolhido em funçãode seu comportamento grafico;
n=2;
coefficientsForPn2=fdetajustePn(n,m,x,y);

% Calculo dos valores do polinomio ajustado em todos os xp
ya2                       = fPnH( n, coefficientsForPn2, xp );
desvioParaP2              = fdesvioPn( n, coefficientsForPn2, m, x, y );
coeficienteDeterminacaoR2 = fCoefDeterminacaoPn( n, coefficientsForPn2, m, x, y );

n
coefficientsForPn2


% Ajuste a um polinomio de 3. grau, escolhido em funçãode seu comportamento grafico;
n=3;
coefficientsForPn3=fdetajustePn(n,m,x,y);

% Calculo dos valores do polinomio ajustado em todos os xp
ya3                       = fPnH( n, coefficientsForPn3, xp );
desvioParaP3              = fdesvioPn( n, coefficientsForPn3, m, x, y );
coeficienteDeterminacaoR3 = fCoefDeterminacaoPn( n, coefficientsForPn3, m, x, y );

n
coefficientsForPn3


% Ajuste a um polinomio de 4. grau, escolhido em funçãode seu comportamento grafico;
n=4;
coefficientsForPn4=fdetajustePn(n,m,x,y);

% Calculo dos valores do polinomio ajustado em todos os xp
ya4                       = fPnH( n, coefficientsForPn4, xp );
desvioParaP4              = fdesvioPn( n, coefficientsForPn4, m, x, y );
coeficienteDeterminacaoR4 = fCoefDeterminacaoPn( n, coefficientsForPn4, m, x, y );

n
coefficientsForPn4


% Ajuste a um polinomio de 5. grau, escolhido em funçãode seu comportamento grafico;
n=5;
coefficientsForPn5=fdetajustePn(n,m,x,y);

% Calculo dos valores do polinomio ajustado em todos os xp
ya5                       = fPnH( n, coefficientsForPn5, xp );
desvioParaP5              = fdesvioPn( n, coefficientsForPn5, m, x, y );
coeficienteDeterminacaoR5 = fCoefDeterminacaoPn( n, coefficientsForPn5, m, x, y );

n
coefficientsForPn5


# % Ajuste a um polinomio de 6. grau, escolhido em funçãode seu comportamento grafico;
# n=6;
# coefficientsForPn6=fdetajustePn(n,m,x,y);

# % Calculo dos valores do polinomio ajustado em todos os xp
# ya6=fPnH(n,coefficientsForPn6,xp);
# desvioParaP6=fdesvioPn(n,coefficientsForPn6,m,x,y);
# R6=fCoefDeterminacaoPn(n,coefficientsForPn6,m,x,y);

# n
# coefficientsForPn6


m
x
y

# Normally, high-level plot functions like plot or mesh call newplot to initializ
# the state of the current axes so that the next plot is drawn in a blank window with
# default property settings. To have two plots superimposed over one another, use the
# hold function.
# https://www.gnu.org/software/octave/doc/v4.0.0/Manipulation-of-Plot-Windows.html#XREFhold
hold all;
grid on;

# You can open multiple plot windows using the `figure(1)` function.
# https://www.gnu.org/software/octave/doc/v4.0.3/Multiple-Plot-Windows.html
figure(1);

# Octave can display more than one plot in a single figure. The simplest way to do
# this is to use the subplot function to divide the plot area into a series of subplot
# windows that are indexed by an integer.
# https://www.gnu.org/software/octave/doc/v4.2.0/Multiple-Plots-on-One-Page.html
# subplot (2, 1, 1)

% Plotagem dos pontos originais (*) e ajustadores
plot(x,y,'*','markersize',20);
legendTextProblem73abc(end+1) = { 'f(x) tabelada' };

# figure(2);
# subplot (2, 1, 2)

plot(xp,ya1,'--b','LineWidth',2);
legendTextProblem73abc(end+1) = { 'P1(x) ajuste' };

# plot(xp,ya2,'-k','LineWidth',2);
# legendTextProblem73abc(end+1) = { 'P2(x) ajuste' };

# plot(xp,ya3,'-g','LineWidth',2);
# legendTextProblem73abc(end+1) = { 'P3(x) ajuste' };

plot(xp,ya4,'-r','LineWidth',2);
legendTextProblem73abc(end+1) = { 'P4(x) ajuste' };

# plot(xp,ya5,'-c','LineWidth',2);
# legendTextProblem73abc(end+1) = { 'P5(x) ajuste' };

# plot(xp,ya6,'-y','LineWidth',2);
# legendTextProblem73abc(end+1) = { 'P6(x) ajuste' };

# legend(legendTextProblem73abc,'location','northwest');
# hold off;

# By default, Octave refreshes the plot window when a prompt is printed, or when
# waiting for input. The drawnow function is used to cause a plot window to be updated.
# https://www.gnu.org/software/octave/doc/v4.0.0/Manipulation-of-Plot-Windows.html
# drawnow();

printf( "Dentre as funções testadas a que melhor parece se adequar aos pontos é\n" );
printf( "o Polinômio de grau 4. Essa conclusao foi feita analizando o gráfico das funções.\n" );


printf( "\n\n\n7.3b). Determine uma função representativa dos pontos tabelados por interpolação polinomial na\n" )
printf( "faixa medida.\n" )
printf( "\n" )

x=[ 13.9, 37.0, 67.8, 79.0, 85.5, 93.1, 99.2 ];
y=[ 1.04, 1.18, 1.29, 1.35, 1.28, 1.21, 1.06 ];

a = min( x );
b = max( x );

n = numel( x ) - 1;
h = ( b - a ) / n;


# coef_by_me =
#   -1.164279323185479   1.399845394498246  -0.235566071312767
#
# -1.164279323185479 + 1.399845394498246*x^1 - 0.235566071312767*x^2
#
coef_by_me      = interpolacaoPolinomial( x, y, n );
coef_by_polyfit = fliplr( polyfit( x, y, n ) );

xInterPontos = a - 1 : h / 20 : b + 1;
yAproximado  = fPnPorHorner( n, coef_by_me, xInterPontos );

coef_by_me


# To plot the graphcs
# hold all;
# grid on;
# plot( x, y , '*', 'markersize', 20 );
# legendTextProblem73abc(end+1) = { 'f(x) tabelada' };

plot( xInterPontos, yAproximado, '-k', 'LineWidth', 2 );
legendTextProblem73abc(end+1) = { 'Interpolacao Polinomial' };

# legend(legendTextProblem73abc,'location','north');
# hold off;


printf( "\n\n7.3c). Plote um gráfico com os pontos experimentais, as funções aproximadoras obtidos em (7.3a) e\n" )
printf( "em (7.3b);\n" )
printf( "\n" )

legend(legendTextProblem73abc,'location','northwest');
hold off;


printf( "\n\n\n7.3d). Calcule o Coeficiente de Determinação R2;\n" )
printf( "\n" )

coeficienteDeterminacaoR1
coeficienteDeterminacaoR2
coeficienteDeterminacaoR3
coeficienteDeterminacaoR4
coeficienteDeterminacaoR5


printf( "\n\n\n7.3e). Faça o gráfico da função ajustada e estabeleça a metodologia mais adequada para representar\n" )
printf( "o comportamento do volume de álcool em função da temperatura na faixa medida. Justifique.\n" )
printf( "" )

figure(2);
hold on;

# To plot the graphcs
# hold all;
# grid on;

plot(x,y,'*','markersize',20);
legendTextProblem71e(end+1) = { 'f(x) tabelada' };

plot(xp,ya1,'--b','LineWidth',2);
legendTextProblem71e(end+1) = { 'P1(x) ajuste' };

plot(xp,ya2,'-r','LineWidth',2);
legendTextProblem71e(end+1) = { 'P2(x) ajuste' };

plot( xInterPontos, yAproximado, '-k', 'LineWidth', 2 );
legendTextProblem71e(end+1) = { 'Interpolacao Polinomial' };

legend(legendTextProblem71e,'location','northwest');
hold off;


printf( "A melhor representação para o comportamento do volume de álcool em função da temperatura\n" );
printf( "na faixa medida é o obtido via ajuste quadrático, n=2, vide gráfico, onde a interpolação polinomial fica\n" );
printf( "inviável, muito sinuosa, e o ajuste linear não captura a leve curvatura dos pontos experimentais.\n" );
printf( "Observe que o Coeficiente de Determinação R2 não deve ser usado isoladamente como informação\n" );
printf( "para a definição da aproximação mais adequada, pois para a interpolação polinomial temos\n" );
printf( "coeficientes de determinação unitários, com resíduos (desvios locais) nulos, mas no intervalo entre os\n" );
printf( "pontos tabelados podemos ter uma aproximação inconsistente.\n" );



printf( "\n\n\n##############################################################################################################\n" )
printf( "##############################################################################################################\n" )

printf( "\n8.5). Considere a integral I x dx = ∫ ln( )\n" )
printf( "" )

printf( "\n\n8.5a). Quais métodos podem ser aplicados para calcular numericamente esta\n" )
printf( "integral imprópria? Justifique;\n" )
printf( "\n" )

printf( "Pode-se aplicar o método de integração de Gauss-Legendre, pois é um método onde \n" )
printf( "não é avaliada a função integranda sobre os extremos do intervalo de integração.\n" )


printf( "\n\n8.5b). Monte uma function Gm fGm a b m = ( , , ) , para integrar numericamente um\n" )
printf( "função f x ( ) entre [ , ] a b pelo método de Gauss-Legendre, com até m = 7 pontos\n" )
printf( "com precisão double;\n" )
printf( "\n" )

function gaussLegendreIntegral = fGaussLegendreIntegral( m, a, b, targetFunction )

    t = calculateLegendreWeightCoefficients( m );
    C = calculateLegendreNodeCoefficients( m, t );

    summation = 0;

    for i = 1 : m

        x(i)      = ChebyshevDomainLinearTransformationOut( t(m,i), a, b );
        summation = summation + C(m,i)*targetFunction( x(i) );

    end

    gaussLegendreIntegral = (b-a)*summation / 2;

end


a = 0
b = 1

m = 10

# \int_0^1 log(x) dx = x( log(x) - 1 ) |_0^1 = -1
gaussLegendreIntegralExata___ = -1

gaussLegendreIntegral________ = fGaussLegendreIntegral( m  , a, b, @log )
# gaussLegendreIntegralEstimada = fGaussLegendreIntegral( m*2, a, b, @log )

gaussLegendreIntegralErroExato___ = abs( gaussLegendreIntegral________ - gaussLegendreIntegralExata___ )
# gaussLegendreIntegralErroEstimado = abs( gaussLegendreIntegral________ - gaussLegendreIntegralEstimada )


printf( "\n\n5c). Determine e imprima Gm m ( ) e os erros exatos de Gm m ( ) , com m = 2 até 7\n" )
printf( "pontos.\n" )
printf( "\n" )

function gaussLegendreIntegral = fGaussLegendreIntegral( m, a, b, targetFunction )

    if m > 43

        printf( "Error limit %d archived!", 43 )
        gaussLegendreIntegral = 0
        return

    end

    # t = calculateLegendreWeightCoefficients( m );
    # C = calculateLegendreNodeCoefficients( m, t );

    t = ...
    [ ...
             0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.5773502691896258 0.5773502691896256 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.7745966692414834 0 0.7745966692414833 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.8611363115940536 -0.3399810435848565 0.3399810435848563 0.8611363115940531 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9061798459386644 -0.5384693101056823 0 0.5384693101056831 0.9061798459386631 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9324695142031512 -0.6612093864662644 -0.2386191860831969 0.238619186083197 0.6612093864662646 0.9324695142031507 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9491079123427593 -0.7415311855993946 -0.4058451513773974 0 0.4058451513773972 0.7415311855993947 0.949107912342758 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9602898564975357 -0.7966664774136294 -0.525532409916328 -0.1834346424956498 0.1834346424956498 0.5255324099163291 0.7966664774136276 0.9602898564975358 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9681602395076241 -0.8360311073266389 -0.6133714327005869 -0.3242534234038097 0 0.3242534234038094 0.6133714327005877 0.836031107326644 0.9681602395076216 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9739065285171676 -0.8650633666889879 -0.6794095682990253 -0.433395394129247 -0.1488743389816312 0.1488743389816312 0.4333953941292468 0.6794095682990235 0.8650633666889895 0.9739065285171665 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9782286581460586 -0.8870625997680949 -0.7301520055740535 -0.5190961292068089 -0.269543155952345 0 0.2695431559523452 0.5190961292068095 0.7301520055740526 0.8870625997681038 0.9782286581460504 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9815606342467288 -0.9041172563704635 -0.7699026741943071 -0.5873179542866197 -0.3678314989981789 -0.125233408511469 0.1252334085114689 0.3678314989981792 0.587317954286622 0.7699026741943052 0.9041172563704577 0.9815606342467359 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9841830547186028 -0.9175983992229617 -0.80157809073331 -0.6423493394403497 -0.4484927510364421 -0.2304583159551354 0 0.2304583159551354 0.4484927510364419 0.6423493394403511 0.8015780907333029 0.91759839922297 0.9841830547185968 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9862838086967505 -0.9284348836637231 -0.8272013150696341 -0.687292904811743 -0.5152486363581419 -0.3191123689278912 -0.1080549487073435 0.1080549487073434 0.3191123689278912 0.5152486363581443 0.6872929048117465 0.8272013150696271 0.9284348836637213 0.9862838086967505 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9879925180204261 -0.9372733924007867 -0.8482065834104201 -0.724417731360153 -0.5709721726085453 -0.3941513470775629 -0.2011940939974349 0 0.2011940939974345 0.3941513470775614 0.5709721726085545 0.7244177313601261 0.8482065834104552 0.9372733924007512 0.9879925180204431 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9894009349916926 -0.9445750230730426 -0.8656312023881356 -0.7554044083547689 -0.6178762444027406 -0.4580167776572044 -0.2816035507792615 -0.09501250983763737 0.09501250983763737 0.2816035507792615 0.4580167776571993 0.6178762444027713 0.7554044083546881 0.8656312023882603 0.9445750230728998 0.9894009349917641 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9905754753140121 -0.9506755217692965 -0.8802391537272481 -0.7815140038960332 -0.6576711592172113 -0.5126905370863154 -0.3512317634538973 -0.1784841814958469 0 0.1784841814958474 0.351231763453897 0.5126905370863107 0.6576711592172277 0.7815140038960476 0.8802391537271378 0.9506755217694914 0.9905754753139019 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9915651684216238 -0.9558239495700968 -0.8926024664982335 -0.8037049589726349 -0.6916870430600609 -0.5597708310741051 -0.4117511614627936 -0.2518862256915134 -0.08477501304173535 0.08477501304173531 0.2518862256915128 0.4117511614627947 0.5597708310741177 0.691687043059966 0.8037049589729409 0.8926024664976917 0.9558239495706393 0.9915651684213934 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9924068438450765 -0.960208152130907 -0.9031559036193816 -0.8227146565338208 -0.7209661773368296 -0.6005453046611826 -0.4645707413760553 -0.3165640999636196 -0.1603586456402259 0 0.1603586456402257 0.3165640999636226 0.4645707413760283 0.6005453046613086 0.7209661773364631 0.8227146565345488 0.9031559036184315 0.9602081521316649 0.9924068438448099 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9931285991823258 -0.9639719272866913 -0.9122344282386207 -0.8391169718333772 -0.7463319064538175 -0.6360536807289132 -0.5108670019501883 -0.3737060887155469 -0.2277858511416283 -0.07652652113349803 0.07652652113349792 0.2277858511416297 0.3737060887155322 0.510867001950266 0.6360536807287195 0.7463319064540349 0.839116971833432 0.9122344282380866 0.9639719272874434 0.9931285991819662 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9937521706155723 -0.9672268385762902 -0.9200993341431707 -0.853363364585358 -0.7684399634762239 -0.6671388041965204 -0.5516188358876966 -0.4243421202073243 -0.2880213168024073 -0.1455618541608948 0 0.1455618541608954 0.2880213168024082 0.42434212020732 0.5516188358877019 0.6671388041965712 0.7684399634758131 0.8533633645868109 0.9200993341403957 0.9672268385791817 0.9937521706143527 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9942945854606825 -0.9700604978860085 -0.9269567721409662 -0.8658125777424647 -0.7878168059744119 -0.6944872631861598 -0.5876404035075989 -0.4693558379865353 -0.3419358208921194 -0.2078604266882185 -0.06973927331972231 0.06973927331972235 0.2078604266882195 0.3419358208921062 0.4693558379866087 0.5876404035073787 0.6944872631866811 0.7878168059730323 0.8658125777456426 0.9269567721361469 0.9700604978902773 0.9942945854590706 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9947693349615206 -0.9725424712939005 -0.932971086772836 -0.8767523582797229 -0.8048884016276426 -0.7186613631258499 -0.6196098757653499 -0.5095014778456683 -0.3903010380303952 -0.2641356809703205 -0.133256824298467 0 0.1332568242984671 0.2641356809703208 0.3903010380303711 0.5095014778458354 0.6196098757648746 0.7186613631262546 0.8048884016289223 0.8767523582754757 0.9329710867777765 0.9725424712917924 0.9947693349615773 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9951872199953948 -0.9747285559734179 -0.9382745520120807 -0.8864155269729167 -0.8200019860178999 -0.740124191542283 -0.6480936519567395 -0.5454214713812561 -0.4337935076281681 -0.3150426796957472 -0.1911188674736585 -0.06405689286260531 0.06405689286260541 0.1911188674736577 0.3150426796957487 0.4337935076282069 0.5454214713811255 0.6480936519561099 0.740124191548307 0.820001985996307 0.8864155270184121 0.938274551950688 0.9747285560245588 0.9951872199764384 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9955569696246183 -0.9766639219646236 -0.9429745705039024 -0.8949919985568654 -0.8334426283040075 -0.7592592632756954 -0.6735663683711107 -0.5776629302777117 -0.4730027314356426 -0.3611723058112409 -0.24386688372082 -0.1228646926107131 0 0.1228646926107137 0.2438668837208137 0.3611723058112964 0.4730027314353414 0.577662930278613 0.6735663683699979 0.7592592632737587 0.8334426283174002 0.8949919985197695 0.9429745705674931 0.9766639219001629 0.9955569696515949 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9958857015523929 -0.9783854449798766 -0.9471590676391608 -0.9026378613818453 -0.8454459430591442 -0.7763859487218785 -0.6964272604411833 -0.6066922930284327 -0.5084407148094739 -0.4030517551311371 -0.2920048394841674 -0.1768588203570204 -0.05923009342931272 0.05923009342931262 0.1768588203570192 0.2920048394842136 0.403051755130667 0.5084407148119812 0.6066922930202626 0.6964272604575655 0.7763859487057555 0.8454459430460836 0.9026378614614972 0.9471590674917424 0.9783854451260002 0.9958857014929273 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9961792614811752 -0.9799234794231234 -0.9509005542803045 -0.9094823227289327 -0.8562079074023721 -0.7917716390367648 -0.7170134738668124 -0.632907971884577 -0.5405515645939313 -0.441148251749169 -0.3359939036382173 -0.2264593654395667 -0.113972585609531 0 0.1139725856095313 0.22645936543956 0.3359939036383671 0.4411482517475976 0.5405515646028698 0.6329079718539719 0.7170134739328513 0.7917716389569477 0.85620790740268 0.9094823229315196 0.9509005538689718 0.9799234798366161 0.9961792613129863 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9964425000638893 -0.981303158753862 -0.9542592885173545 -0.9156330203499159 -0.8658925258193343 -0.805641369664549 -0.7356108783684669 -0.6566510939575907 -0.5697204718291413 -0.4758742249528647 -0.3762515160882177 -0.2720616276355596 -0.1645692821333579 -0.05507928988403418 0.05507928988403442 0.1645692821333586 0.2720616276355336 0.37625151608862 0.4758742249500665 0.5697204718408706 0.6566510939231742 0.7356108784413896 0.8056413695629544 0.8658925258759641 0.9156330204445641 0.9542592882642339 0.9813031590125103 0.9964424999608777 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9966794309198164 -0.9825455344129842 -0.9572855634419386 -0.9211802544206766 -0.8746377966228426 -0.8181854882019483 -0.7524628534161912 -0.6782145361655617 -0.5962817978666134 -0.5075929548648671 -0.4131528882376333 -0.3140316378580226 -0.2113522861666939 -0.1062782301326677 0 0.1062782301326672 0.2113522861667142 0.3140316378578158 0.4131528882387827 0.5075929548589403 0.5962817978963861 0.678214536045299 0.7524628537805931 0.8181854873733612 0.8746377980426723 0.9211802526035725 0.9572855651310462 0.9825455333523055 0.9966794312483067 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9968934770605098 -0.9836681417065199 -0.9600218431436026 -0.926200064812595 -0.8825605246295337 -0.8295657691904934 -0.7677774278570733 -0.6978504973200818 -0.6205261816966086 -0.5366241486732019 -0.447033769372466 -0.3527047255668387 -0.2546369261633153 -0.1538699136088047 -0.05147184255531688 0.05147184255531698 0.1538699136088066 0.2546369261632245 0.352704725567872 0.447033769366424 0.5366241486949695 0.6205261816450227 0.6978504974054607 0.7677774277388567 0.8295657693932181 0.8825605241902988 0.9262000656317342 0.9600218420591659 0.9836681426174817 0.9968934767191111 0 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9970874337706638 -0.9846860370473518 -0.9625037750402999 -0.9307571085547243 -0.889759976521221 -0.839920334687127 -0.7817331492041705 -0.7157767813178312 -0.642706725008753 -0.563249160548366 -0.4781937822836074 -0.3883859015714632 -0.2947180699825357 -0.1981211993359617 -0.09955531215232792 0 0.09955531215232721 0.1981211993359595 0.2947180699823794 0.388385901574303 0.4781937822627099 0.5632491606450403 0.6427067246678368 0.7157767823185039 0.7817331467399888 0.8399203396176649 0.8897599687808714 0.9307571178293582 0.9625037668076786 0.9846860420976687 0.9970874322141169 0 0 0 0 0 0 0 0 0 0 0 0
         -0.9972638799188446 -0.9856114580891413 -0.964762330817708 -0.9349060065411694 -0.8963211986062666 -0.8493675994768104 -0.7944837928313416 -0.7321821270550307 -0.6630442601152019 -0.5877157610066159 -0.5068999074021537 -0.4213512765773453 -0.3318686021963147 -0.2392873622615561 -0.1444719615822801 -0.0483076656877419 0.04830766568774197 0.1444719615822825 0.239287362261474 0.3318686021958415 0.4213512765887077 0.5068999073280539 0.5877157612914932 0.6630442593494853 0.7321821285710378 0.7944837906798655 0.8493676012541586 0.8963211991327551 0.9349060020741408 0.9647623384704103 0.9856114510215646 0.9972638826765144 0 0 0 0 0 0 0 0 0 0 0
         -0.997424426595944 -0.9864564489933666 -0.9668220232078918 -0.9386950798819074 -0.9023163678500745 -0.8580098135054844 -0.8061623157280637 -0.7472304965117753 -0.6817319666087611 -0.6102423415536454 -0.5333899064044932 -0.4518500169138983 -0.3663392577751619 -0.2776090971577104 -0.1864392988272048 -0.09363106585473994 0 0.09363106585473983 0.186439298827211 0.2776090971577698 0.3663392577748852 0.4518500169097388 0.5333899064458633 0.6102423413628784 0.6817319671982136 0.7472304951734873 0.806162317857847 0.8580098119220922 0.9023163651550425 0.9386950913354614 0.9668220034401347 0.9864564679402598 0.997424419014499 0 0 0 0 0 0 0 0 0 0
         -0.9975712169408355 -0.9872292856110575 -0.9687064082973944 -0.9421639605684869 -0.9078086900881306 -0.8659351466656011 -0.8168839901843534 -0.761064990624523 -0.698939055526148 -0.6310217552842268 -0.5578754887192451 -0.4801065491793025 -0.3983592768314585 -0.3133110814557922 -0.2256666916145122 -0.1361523572587365 -0.04550982195310333 0.04550982195310315 0.1361523572587461 0.2256666916141024 0.3133110814614523 0.3983592767901376 0.4801065493762923 0.557875488037649 0.6310217570937386 0.6989390516942938 0.7610649974405076 0.8168839790897731 0.8659351646368914 0.9078086615245506 0.9421640005498549 0.9687063644834296 0.9872293185174806 0.9975712052809095 0 0 0 0 0 0 0 0 0
         -0.9977076287909832 -0.9879326946031761 -0.9704418897956183 -0.9453410306279095 -0.9128573055461671 -0.8732172984604185 -0.8267508395604841 -0.7738098093692248 -0.7148147016369285 -0.6502242784681116 -0.5805453783682479 -0.5063227621066753 -0.4281375444539482 -0.3466015538619053 -0.2623529412804013 -0.1760510611616116 -0.08837134327571967 0 0.08837134327571894 0.1760510611615844 0.2623529412809047 0.3466015538631378 0.4281375443974924 0.5063227625567568 0.580545376264284 0.650224285604223 0.714814682310336 0.7738098531803921 0.82675075506888 0.8732174363853991 0.9128571182623452 0.9453412366494692 0.9704417131084958 0.9879328030538117 0.9977075949442958 0 0 0 0 0 0 0 0
         -0.9978294480338793 -0.9885892725380067 -0.9720241457168839 -0.9482759402064584 -0.917496036294108 -0.8799304816591355 -0.8358470851659053 -0.7855760832489539 -0.7294893520240802 -0.6680010987953515 -0.601567738695907 -0.5306802492533406 -0.4558639570376745 -0.3776725440665537 -0.2966849957986388 -0.2135008922861844 -0.1287361038097719 -0.04301819847370832 0.04301819847370819 0.1287361038097736 0.2135008922863298 0.2966849957942426 0.377672544114781 0.4558639567422991 0.5306802504873758 0.6015677347410383 0.6680011091287565 0.7294893297061462 0.7855761220104878 0.8358470355790295 0.8799305146882506 0.9174960679593968 0.9482758073192369 0.9720243533564993 0.9885890883751566 0.9978295185320268 0 0 0 0 0 0 0
         -0.9979454796233116 -0.9891832462327299 -0.9734971121287148 -0.9509679600308436 -0.9217852001412917 -0.8861221915713786 -0.8442548384559619 -0.7964580481232623 -0.7430794939392429 -0.6844859738989051 -0.6210927535098123 -0.553342340487735 -0.4817108919520867 -0.4067005065024857 -0.3288374302451424 -0.2486677927648931 -0.1667539302413409 -0.08367040895471932 0 0.08367040895471947 0.1667539302414323 0.248667792761622 0.3288374302866854 0.4067005062164558 0.4817108932382149 0.5533423363033395 0.6210927639519843 0.6844859534599959 0.7430795243698937 0.7964580197937452 0.8442548306617704 0.8861222913263362 0.9217849571966511 0.9509683408687759 0.9734966900473461 0.9891835587542606 0.9979453703706153 0 0 0 0 0 0
         -0.9980452907766325 -0.9897525138174126 -0.9748291466029849 -0.9534812644310161 -0.9257321736195117 -0.8918596088205316 -0.8520340851110726 -0.8065441369171426 -0.7556860251870712 -0.6997986489357694 -0.6392543944952769 -0.5744560491847839 -0.5058347005387014 -0.4338471763476672 -0.3589724387952323 -0.2817088099688546 -0.2025704539011795 -0.1220840253360875 -0.0407851479045807 0.04078514790458092 0.122084025336085 0.2025704539015693 0.2817088099592143 0.3589724388948906 0.4338471757521733 0.5058347029472668 0.5744560419674422 0.6392544113327032 0.699798618078428 0.7556860668969619 0.8065441081110417 0.852034045399203 0.8918597941170053 0.9257317922660838 0.9534818041166458 0.9748285935144028 0.9897529009078719 0.9980451592879406 0 0 0 0 0
         -0.9981811482882391 -0.9901544252598654 -0.9762297078517564 -0.9556543269467344 -0.9294941017616271 -0.897120200931575 -0.8592741075196603 -0.8158982912188497 -0.7674039426124644 -0.7140435296388643 -0.6561735581108777 -0.5941533066740814 -0.5283773308277083 -0.4592604906766448 -0.387240169372487 -0.3127715584653777 -0.2363255124964306 -0.158385339999887 -0.07944380460875151 0 0.07944380460875204 0.1583853399998459 0.2363255124973039 0.3127715584524871 0.3872401695212604 0.4592604894836024 0.5283773375554515 0.5941532784862793 0.6561736506265446 0.7140432805917043 0.7674045153662965 0.8158971306154992 0.8592762153238112 0.8971168118736058 0.9294988608627335 0.9556487905201381 0.9762348737209323 0.9901509640909342 0.9981822690647046 0 0 0 0
         -0.9982602792505583 -0.9906626485384835 -0.9773433014547375 -0.9578428580548871 -0.9328624556536935 -0.9020722204279716 -0.8659721014347314 -0.8246057231551668 -0.7783100852126411 -0.7273147926226234 -0.6719591758793185 -0.6125523870817522 -0.5494678594044493 -0.483075519654142 -0.4137792849778868 -0.3419940755846429 -0.2681521863559445 -0.1926975807522908 -0.1160840706649677 -0.03877241750608081 0.03877241750608017 0.1160840706649519 0.1926975807516513 0.2681521863758196 0.3419940753991838 0.413779285899409 0.4830755168744229 0.5494678638759108 0.6125523898915041 0.6719591315465953 0.727314959889485 0.7783096545959156 0.8246065962611646 0.8659706211777813 0.9020743907400983 0.9328596282778426 0.9578460749606352 0.9773402359353341 0.9906647861826287 0.9982595568605519 0 0 0
         -0.9984357279615568 -0.9908235918072447 -0.9788113104118599 -0.9594539312086213 -0.9363215037974412 -0.9064748917452506 -0.8723157924287158 -0.8326648365741669 -0.7884981136819383 -0.7396922196348588 -0.686707086188436 -0.6297625843460185 -0.5692217384938784 -0.5054163620620828 -0.4387173335495595 -0.3695050126710885 -0.2981762784863842 -0.2251396055654846 -0.1508133548656241 -0.07562325898913358 0 0.07562325898913351 0.1508133548656097 0.2251396055632181 0.2981762785461485 0.3695050120332671 0.4387173376958037 0.505416342746366 0.5692218087433732 0.6297623746443129 0.6867076176734235 0.7396910446107524 0.7885004577189906 0.8326605027901564 0.8723234711594112 0.9064623449005325 0.9363405994698466 0.9594302633008956 0.978835568153102 0.9908060241440969 0.998441266720885 0 0
         -0.9984012827731924 -0.9915724719169292 -0.9793517605766183 -0.9617401326085224 -0.9389595051649615 -0.9109065227082743 -0.8780825937784872 -0.8402272790166205 -0.7980084511616303 -0.7512487951023292 -0.7005125872525479 -0.6458744173597231 -0.5877484486618801 -0.5263943431267014 -0.4621723404450097 -0.395423747206728 -0.3265161437967544 -0.2558250769732305 -0.1837368067114617 -0.1106450272063935 -0.03694894316535028 0.03694894316535043 0.1106450272064035 0.1837368067121942 0.2558250769447934 0.3265161441634263 0.395423744562563 0.4621723533168084 0.5263942962990541 0.5877485846218712 0.6458740876756481 0.7005132807262353 0.7512474898996836 0.7980107507758749 0.8402233369542477 0.8780894081721051 0.9108950248198461 0.9389773753307421 0.9617165400757453 0.9793762931235013 0.9915546294297334 0.9984074827375158 0
         -0.9965653142561757 -0.9953830109457641 -0.9756429816721208 -0.9681440875082423 -0.9389196240610114 -0.9167009473637289 -0.8826867785495569 -0.8476517612255893 -0.80675089669042 -0.7621250038705742 -0.7134198179129424 -0.6609896556875938 -0.6051397865495179 -0.5461132480770641 -0.4842525367517595 -0.4198609079194575 -0.3532827298214148 -0.284861979401497 -0.2149562462941153 -0.1439298094907796 -0.07215299087429281 0 0.07215299087429086 0.1439298094913432 0.2149562462691529 0.2848619797838319 0.3532827267103207 0.4198609244417622 0.4842524726691544 0.5461134428566033 0.6051392961518999 0.6609907346145957 0.7134176098710906 0.7621294809487378 0.8067416630772427 0.8476714402801898 0.8826495054126039 0.9167778398627155 0.9388173851273113 0.9683776083031519 0.9754177657184492 0.9957224006536658 0.9962667918054897 ...
    ];

    C = ...
    [ ...
         2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.9999999999999998 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.5555555555555556 0.8888888888888888 0.5555555555555556 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.3478548451374526 0.6521451548625473 0.6521451548625469 0.3478548451374532 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.236926885056189 0.4786286704993672 0.5688888888888883 0.4786286704993654 0.2369268850561901 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.1713244923791712 0.3607615730481378 0.4679139345726899 0.4679139345726942 0.3607615730481348 0.1713244923791722 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.1294849661688677 0.2797053914892812 0.3818300505051124 0.4179591836734761 0.3818300505051155 0.2797053914892773 0.1294849661688698 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.1012285362903738 0.2223810344533793 0.3137066458778804 0.3626837833783713 0.3626837833783538 0.3137066458778923 0.2223810344533728 0.1012285362903763 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.08127438836157608 0.1806481606948507 0.2606106964029506 0.3123470770399789 0.3302393550012887 0.3123470770399727 0.2606106964029634 0.1806481606948414 0.08127438836157737 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.06667134430869015 0.1494513491505759 0.2190863625159803 0.2692667193100091 0.2955242247147358 0.2955242247147681 0.2692667193099844 0.2190863625159949 0.149451349150569 0.06667134430869227 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.05566856711616897 0.1255803694649159 0.1862902109277164 0.2331937645920069 0.2628045445102534 0.2729250867778635 0.2628045445103009 0.2331937645919356 0.1862902109277866 0.1255803694648685 0.05566856711618351 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.04717533638649418 0.1069393259953842 0.1600783285432228 0.2031674267232447 0.2334925365381208 0.2491470458136779 0.2491470458131185 0.2334925365386095 0.2031674267228841 0.1600783285434331 0.1069393259952934 0.04717533638651691 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.04048400476529745 0.09212149983779118 0.1388735102196912 0.1781459807620526 0.2078160475367577 0.2262831802630726 0.2325515532306739 0.2262831802630821 0.2078160475367337 0.17814598076208 0.1388735102196701 0.0921214998378045 0.04048400476529303 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.03511946033167002 0.08015808715992265 0.1215185706877108 0.1572031671585022 0.1855383974775046 0.2051984637217059 0.2152638534629541 0.2152638534630598 0.2051984637216401 0.1855383974775329 0.157203167158497 0.1215185706876959 0.08015808715993769 0.03511946033166667 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.03075324199615204 0.07036604748795804 0.1071592204674026 0.1395706779258825 0.166269205817435 0.1861610000148441 0.1984314853280617 0.2025782419245382 0.1984314853280392 0.1861610000148468 0.1662692058174733 0.1395706779258137 0.1071592204674766 0.07036604748789987 0.03075324199617641 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.02715245941189837 0.06225352393835397 0.09515851168263509 0.124628971255681 0.1495959888162086 0.1691565193956033 0.1826034150439893 0.1894506104563438 0.1894506104536305 0.1826034150462233 0.1691565193941248 0.1495959888169237 0.1246289712555015 0.09515851168258374 0.06225352393839672 0.02715245941190269 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.02414830286889336 0.05545952937262441 0.08503614831878789 0.1118838471932938 0.1351363684668784 0.1540457610794157 0.1680041021534417 0.1765627053700972 0.1794464703533891 0.1765627053691587 0.168004102155047 0.154045761077528 0.1351363684687377 0.1118838471916598 0.08503614832001612 0.05545952937198103 0.02414830286904938 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.02161601352601084 0.04971454889738517 0.07642573025032624 0.1009420441112997 0.1225552067070191 0.1406429146744459 0.1546846751235815 0.1642764837462957 0.1691423829660119 0.1691423829567401 0.1642764837546657 0.1546846751168293 0.140642914679236 0.1225552067041311 0.1009420441127322 0.0764257302496196 0.04971454889791659 0.0216160135257531 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01946178823011691 0.04481422676735183 0.0690445427304552 0.09149002163455999 0.111566645532916 0.1287539625544483 0.1426067021576804 0.1527660420831715 0.1589688433753175 0.1610544498682919 0.1589688433737109 0.1527660420870838 0.142606702151274 0.1287539625622995 0.1115666455252632 0.09149002164090393 0.06904454272570905 0.04481422677040059 0.01946178822904518 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01761400713482231 0.04060142980831535 0.06267204833102066 0.08327674157436006 0.1019301198165096 0.1181945319743793 0.131688638420746 0.1420961093612258 0.1491729864183637 0.1527533871921382 0.1527533870677726 0.1491729865312655 0.1420961092673977 0.1316886384931998 0.1181945319214344 0.101930119853704 0.08327674154933683 0.06267204834629245 0.04060142980100764 0.01761400713670853 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01601722826591057 0.03695378973581543 0.05713442549820168 0.07610011352567601 0.09344442358602488 0.1087972990098161 0.1218314162371146 0.1322689384302501 0.139887395002116 0.1445244037857459 0.1460811338333551 0.1445244038354977 0.1398873949146981 0.1322689385366682 0.1218314161300651 0.1087972991037984 0.09344442351278624 0.07610011357652156 0.05713442546649346 0.03695378975308192 0.01601722826036299 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01462799529930603 0.03377490154419385 0.05229333526440893 0.06979646827289442 0.08594160637431575 0.1004141442808335 0.1129322962682143 0.1232523765743564 0.1311735050876766 0.1365414979763539 0.1392518732837734 0.1392518723948235 0.1365414988044401 0.1311735043657427 0.1232523771677865 0.1129322958050398 0.1004141446249593 0.08594160613220661 0.06979646843239629 0.05229333516779199 0.03377490159422495 0.0146279952842613 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01341185952739887 0.03098800566509274 0.04803767212571463 0.06423242087435239 0.07928141240188122 0.09291576533706326 0.1048920922960906 0.1149966393030139 0.1230490852620708 0.1289057212703909 0.1324620402031467 0.1336545715749252 0.1324620397965341 0.1289057220019242 0.1230490843372161 0.1149966402834359 0.1048920913706929 0.09291576613660631 0.07928141176457516 0.06423242133593339 0.04803767183470315 0.0309880058108651 0.01341185948637241 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01234122980338936 0.02853138861345736 0.04427743883962508 0.05929858492643066 0.07334648131487757 0.08619016174122868 0.09761865176933804 0.1074442706095501 0.1155056673345497 0.1216704739519079 0.125837454963505 0.1279381970817895 0.1279381933447557 0.1258374584727174 0.1216704708369885 0.1155056699758052 0.1074442684457812 0.09761865349944175 0.08619016038304783 0.07334648235203571 0.05929858418793804 0.04427743928808518 0.02853138841574731 0.01234122984800763 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01139379834345755 0.02635498676532528 0.0409391570871503 0.05490469492777821 0.06803833521000731 0.08014069898791101 0.09102826306463588 0.1005359482721735 0.1085196250617589 0.1148582586503484 0.1194557640597123 0.1222424423291326 0.1231760546040355 0.1222424418652211 0.119455764890004 0.1148582576098305 0.1085196261497693 0.1005359472681289 0.091028263898578 0.08014069836700256 0.06803833561412878 0.05490469470220198 0.04093915720911766 0.02635498668246749 0.01139379838012292 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.01055137254859684 0.02441785202782981 0.03796238081506655 0.05097582880988626 0.06327404255721339 0.07468415336182843 0.08504589108993206 0.09421380305222904 0.1020591590774657 0.1084718417356589 0.1133618162465276 0.1166604428259806 0.1183214168887201 0.1183214127963826 0.1166604467017882 0.1133618127781977 0.1084718446637064 0.1020591567446802 0.09421380479986545 0.08504588988585056 0.07468415407426013 0.06327404225688692 0.05097582884489675 0.03796238084507912 0.02441785206313844 0.01055137250833194 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.009798995391787191 0.02268623138468712 0.03529705665059361 0.04744940944180844 0.05898353624737106 0.06974883060354781 0.07960485361463489 0.08842318068191035 0.09608869655555019 0.1025016778410195 0.1075782366124497 0.1112525457371217 0.1134762824043444 0.1142209348251902 0.1134762778280501 0.1112525546155834 0.1075782240741247 0.1025016929911815 0.0960886801249294 0.08842319699970898 0.07960483866929452 0.0697488431899025 0.05898352658323244 0.04744941618419576 0.03529705234760867 0.02268623379465419 0.009798994605517907 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.009124283659887933 0.02113211386452367 0.03290141873614537 0.04427295016394964 0.0551073291221333 0.06527293736096616 0.07464620575533902 0.08311342062685223 0.09057174591160605 0.09693065157957136 0.1021129789548246 0.106055749660923 0.1087112130405354 0.1100469884252565 0.1100470404158974 0.1087111632096389 0.1060557954728077 0.1021129384764923 0.09693068606330231 0.09057171749253577 0.08311344331932781 0.07464618825666618 0.06527295024435398 0.05510732022677817 0.04427295585449699 0.03290141535381364 0.02113211565458612 0.009124283096788465 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.008516904491939092 0.01973206069035303 0.03074056684294999 0.04140194480309398 0.05159496576598413 0.06120294395548591 0.07011808832474128 0.07823815627818774 0.08547245161518006 0.09173753440949836 0.09696408740855787 0.1010909907205485 0.1040736190711472 0.1058758265743281 0.1064797213776847 0.1058758136170628 0.1040736442527883 0.1010909549135358 0.09696413133090301 0.09173748559992795 0.08547250174153796 0.0782381083000841 0.07011813127618324 0.06120290786054772 0.05159499443516265 0.04140192321174256 0.03074058184867869 0.01973205206061601 0.008516907221549375 0 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.007968196476124456 0.01846644073999339 0.02878477914394108 0.03879907764290486 0.04840282180421899 0.05749298073975026 0.06597442812071354 0.07375575722355909 0.08075612632404212 0.0868995509845053 0.0921227524244265 0.0963685264884797 0.09959359709222207 0.1017622612732958 0.1028527228864582 0.1028526461966946 0.1017623350133308 0.09959352879755329 0.09636858759317145 0.09212269942665539 0.08689959568084482 0.0807560896067154 0.07375578656049049 0.06597440550478777 0.05749299728584957 0.04840281051224988 0.03879908487664328 0.0287847745912125 0.01846644349339432 0.007968195495771038 0 0 0 0 0 0 0 0 0 0 0 0 0
         0.007470806392337437 0.0173186122081322 0.02700916096269529 0.03643203545732804 0.0454939305856071 0.05410296622914344 0.06217475882469399 0.06962875888930879 0.07639006506008018 0.08239346145295379 0.08757611763872254 0.09189089334988269 0.09528931027703481 0.09774440814227191 0.0992238223309352 0.09972181594119783 0.09922369893696922 0.09774464406695768 0.09528898240528927 0.0918912853963739 0.08757569256948082 0.08239388924339645 0.07638966052917924 0.06962912057813413 0.06217445218316986 0.05410321332229367 0.0454937407461672 0.03643217404848022 0.02700906788686232 0.01731866388114463 0.007470790463776366 0 0 0 0 0 0 0 0 0 0 0 0
         0.007018619120745084 0.0162744041148633 0.0253919791024474 0.03427403925469651 0.04283566879484184 0.05099828423239951 0.05868391586787588 0.06582233447054425 0.0723457515139075 0.07819387027629096 0.08331201669702837 0.0876519365697105 0.09117409144494416 0.09384414302024086 0.09563900340222893 0.09653979284504347 0.09654038665025719 0.09563842251473723 0.09384469895508525 0.0911735707568314 0.08765241408007594 0.08331158773247906 0.078194247796621 0.07234542593187936 0.06582261005912646 0.05868368621457905 0.05099847270470177 0.04283551857841143 0.03427415055627364 0.025391908774389 0.01627443653319903 0.007018611433545169 0 0 0 0 0 0 0 0 0 0 0
         0.006606123870072977 0.01532151506562453 0.02391666784712194 0.03229838182035297 0.04040385811554389 0.04814554897877602 0.05547272141094054 0.06230492565135926 0.0685958795908384 0.07427873375157192 0.07931334679335046 0.08364699764418092 0.08724909611407397 0.09008118305064217 0.09212476996566805 0.09335559419177035 0.09376936345438087 0.09335539399676909 0.09212515264898793 0.09008065143822272 0.08724973178077276 0.08364630708171088 0.07931404629839403 0.07427806257494661 0.06859649625022894 0.06230437865162464 0.0554731932193406 0.04814515139365561 0.04040418285475622 0.03229813492550992 0.02391682717066495 0.01532144156703271 0.006606140831113172 0 0 0 0 0 0 0 0 0 0
         0.006228920106591929 0.01444981748803284 0.02256598276341141 0.03048723366817131 0.03817170365886609 0.04552041752641808 0.05251229158742 0.05904960725792357 0.06511579722883477 0.07062526475341033 0.07556596940991897 0.07986455661167703 0.08351685312681315 0.08646218264995653 0.08870516737224501 0.09020017136316894 0.09095910685063421 0.09095497222930107 0.09020415626601831 0.08870145827069764 0.08646552831771637 0.0835139173898763 0.07986707059028531 0.07556386436394763 0.07062698903958728 0.06511441730613124 0.0590506821746432 0.05251148274936871 0.04552099905716048 0.03817130653464695 0.03048749536999123 0.02256581125446731 0.0144499224293518 0.006228883233315118 0 0 0 0 0 0 0 0 0
         0.005884571834654517 0.01364917841516517 0.02132246566146136 0.02883239266522195 0.03610600914592164 0.04311126249515252 0.0497693830109964 0.05603731247145415 0.06188066443879393 0.06721211122571566 0.07205768177230057 0.07628847072495917 0.07998126243105391 0.08298383945702345 0.08540286552613967 0.0870897367464699 0.08815290566391006 0.08847736299133897 0.08814669397325123 0.08710158980656411 0.08538640591508401 0.08300358507445917 0.07995963746000033 0.07631065298938142 0.07203606694381121 0.06723228268095333 0.06186255751819953 0.05605296975862805 0.04975634898555485 0.04312168094875056 0.03609805699455357 0.02883810488759817 0.02131874653388006 0.01365116176379013 0.005883981087807947 0 0 0 0 0 0 0 0
         0.005564848581447901 0.0129168463852663 0.02018286647408381 0.02729525616440609 0.0342171910860122 0.04087430795926656 0.04723369185521304 0.05324885005463692 0.05885389502080091 0.06404728841618468 0.06873759513430638 0.07294874278026388 0.07659361611445016 0.07968932677638157 0.08219025176230521 0.08406975500900496 0.08536125716012216 0.08596249591794387 0.08600975644209082 0.08531557712481967 0.08411247856729477 0.08215150621982453 0.07972349178668894 0.07656423415708052 0.07297346236020616 0.0687171945198221 0.06406384061676945 0.0588406663583495 0.05325928713093112 0.04722554147106284 0.04088060740604454 0.03421243368429406 0.02729862840676446 0.02018079927381852 0.01291778897003619 0.005564622852004783 0 0 0 0 0 0 0
         0.005272885138089434 0.01224142697245266 0.01912028594384543 0.02590279900161866 0.03243695640986127 0.03884111365727996 0.04484807969937427 0.05068874095238741 0.05600466731471551 0.06111655358998217 0.06559213237007298 0.06983333997943385 0.07334201822660799 0.07659417841333599 0.07903858310616083 0.08120809373000738 0.08252387771327456 0.08354456520882533 0.08370107226924341 0.08353797598486666 0.08253674588067386 0.08118954179332925 0.07906198321498807 0.07656695124177175 0.07337192581857553 0.06980195939803027 0.06562378845660885 0.06108573782122214 0.05603367334137777 0.05066233087569563 0.04487129362153215 0.03882155556754441 0.03245250447384992 0.02589148370177757 0.01912742723576617 0.01223792832465333 0.005273823551167019 0 0 0 0 0 0
         0.004998451533549497 0.01161888082307221 0.01816105657873292 0.02456584117574685 0.03085290353057062 0.03689232080459662 0.04268663057061266 0.0482648196567733 0.05337516470883681 0.05835717127977141 0.0626439322340884 0.06690172789860392 0.07024350795933561 0.07367283472742978 0.07597324214050272 0.07848661800745672 0.07968706383504275 0.08120728755167057 0.08129475782848741 0.08175491362722416 0.08075878622856478 0.08011345489915059 0.07809065034424835 0.07633312603228201 0.07335201176087459 0.07052462024959705 0.06665921194054199 0.0628501361107914 0.05818433221432204 0.05351787447342609 0.0481489805010763 0.04277868462911782 0.03682124622370331 0.03090542345561848 0.0245296045355615 0.0181833128227092 0.01160793144155888 0.005001485664750335 0 0 0 0 0
         0.004769924304925288 0.01104859390398255 0.01711671581526483 0.02365565915491989 0.02894992405726896 0.03553594168943412 0.04025292179577591 0.04638464297989409 0.05057466661665028 0.05609742063114902 0.05955390361091664 0.06446409549424617 0.06696321597712378 0.07126230314819877 0.0726322972879718 0.07629643850007588 0.07645167912201048 0.07939636083130465 0.07837290397317945 0.08043868105687979 0.0783807370818715 0.07938276753661631 0.07646762685153749 0.0762817669607934 0.07264281176938737 0.0712575752525936 0.06696176243514296 0.06447124178941324 0.05954199543941759 0.05611304872617872 0.05055629548467616 0.04640475021361409 0.04023222061412824 0.03555542582774154 0.02893374022118195 0.02366635733527677 0.01711230569867958 0.01104865552656763 0.004770625284009602 0 0 0 0
         0.004528681150407721 0.01052055286935747 0.0163066375145298 0.02246099495264904 0.02765614600694628 0.03376575168462855 0.03847381208379543 0.044177041698856 0.04838806507356271 0.05354078950405119 0.05712136083852329 0.06162685784009498 0.06448700669626634 0.06821754354455609 0.07032743204136059 0.0731380266547752 0.07451710773810466 0.07625838603017428 0.07696104628631965 0.07750730903704997 0.07758569405482198 0.07688055901590615 0.07634226792074097 0.07442983799959256 0.07322735984497751 0.07023829934963415 0.06830382598436668 0.0644060989581135 0.06170031656425181 0.05705681848253517 0.05359557636770198 0.04834324995550059 0.04421228586545575 0.03844720802385315 0.03378509399677652 0.02764241018505949 0.02247083074581742 0.01629932574403032 0.01052555935690427 0.004526832337951135 0 0 0
         0.00438376546118513 0.009969567073275917 0.0153203152412424 0.02199108585437044 0.02554670575668473 0.03307281603867117 0.03593774839494256 0.04282776737838468 0.04579276664232514 0.05153849109223752 0.05455990862096379 0.05912311049292106 0.06204089189567773 0.06537110547263295 0.06810208825785079 0.07011832341860144 0.07260162742763397 0.07328994101727503 0.07537122216271583 0.07490350153233452 0.07624817400027306 0.07500886909318266 0.07516054140311881 0.07360482287574806 0.07218626415139903 0.07062641565064255 0.06751378334874031 0.06602254935199482 0.06134682814559877 0.05983734526175639 0.05384781344499365 0.05222712193514849 0.04514516838173464 0.04341764278644786 0.0354148059005778 0.03351297455684579 0.02519270521014512 0.02224497858742763 0.01516867633402613 0.01004137955668025 0.004368390791591208 0 0
         0.004087201548168995 0.00960302415214781 0.01479223118913131 0.02043451043739724 0.02511989325284544 0.0309056017714977 0.034805785773115 0.04075650799544049 0.04375956043676197 0.04960524090519664 0.0519287219026365 0.05718089981235525 0.05915711022392638 0.06332189864000096 0.06527654515867552 0.06790878587778065 0.07012426641918933 0.07089743359112195 0.07350777433385458 0.07233374164093838 0.07523386654970494 0.07229394842301512 0.07518634323459968 0.07081987331590504 0.07336088603092784 0.06792333196906634 0.0698309284573644 0.06363062960840872 0.06470810255923944 0.05800506734485071 0.05812814063237621 0.05115557611748094 0.05023240481112847 0.04325199433978425 0.0411661959644624 0.03447570032894741 0.03116836972276674 0.02491936244898804 0.02057298508258217 0.01471523848635851 0.009631012140704331 0.00408330736915588 0
         -0.002288693545447362 0.01470760451486865 0.02228190431328538 0.007678617140271482 0.0364210077144065 0.01483685699908546 0.04701372049763983 0.02520782654166995 0.05525493229046134 0.03416189409410061 0.0634471529936624 0.04080416688564946 0.07161832299151423 0.0454650223675684 0.07922594972378261 0.0484228336781686 0.08576019134335724 0.04998670916108223 0.090696244413337 0.05051295419768641 0.09357333048934438 0.05028536477561715 0.09412104608617589 0.04942812650239695 0.09229405235216882 0.04791760884950863 0.08823884352492808 0.04561547355268786 0.08226711935497338 0.04229180314076261 0.07482391868635992 0.03765703901384792 0.06645800524207206 0.03134123842507948 0.057826067736837 0.02286269282521305 0.0490027185010399 0.01296504493238754 0.0378531497331018 0.005767831661415228 0.02388757063285056 0.02327881379022876 -0.01097207812514749 ...
    ];

    summation = 0;

    for i = 1 : m

        x(i)      = ChebyshevDomainLinearTransformationOut( t(m,i), a, b );
        summation = summation + C(m,i)*targetFunction( x(i) );

    end

    gaussLegendreIntegral = (b-a)*summation / 2;

end


a = 0
b = 1

# \int_0^1 log(x) dx = x( log(x) - 1 ) |_0^1 = -1
gaussLegendreIntegralExata___ = -1

printf( "\n" )

for i = 2 : 7

    m = i;

    gaussLegendreIntegral________ = fGaussLegendreIntegral( m  , a, b, @log );
    # gaussLegendreIntegralEstimada = fGaussLegendreIntegral( m*2, a, b, @log )

    gaussLegendreIntegralErroExato___ = abs( gaussLegendreIntegral________ - gaussLegendreIntegralExata___ );
    # gaussLegendreIntegralErroEstimado = abs( gaussLegendreIntegral________ - gaussLegendreIntegralEstimada )

    # https://www.gnu.org/software/octave/doc/v4.0.1/Basic-Usage-of-Cell-Arrays.html
    results(end+1).vector = { m, gaussLegendreIntegral________, gaussLegendreIntegralErroExato___ };

end

printf( "%20s | %30s | %30s\n", "m", "Gm", "Erro Exato Gm = |Gm - Ie |" )
printf( "%20s | %30s | %30s\n", "--------------------", "------------------------------", "------------------------------" )

numberToStringPrecision = 15;

for i = 1 : numel( results )

    # https://www.gnu.org/software/octave/doc/v4.0.0/Processing-Data-in-Cell-Arrays.html
    # https://www.gnu.org/software/octave/doc/v4.0.1/Converting-Numerical-Data-to-Strings.html#XREFnum2str
    #
    printf( "%20s | ", num2str( cell2mat( results(i).vector(1) ), numberToStringPrecision ) )
    printf( "%30s | ", num2str( cell2mat( results(i).vector(2) ), numberToStringPrecision ) )
    printf( "%30s\n" , num2str( cell2mat( results(i).vector(3) ), numberToStringPrecision ) )

end


# To plot the graphics
printf( "\n" )
printf( "To plot the graphics\n" )

plotInvervalStart = 7
plotInvervalEnd = 38

a = 0
b = 1

# Calculates the first error
printf( "\n" )

gaussLegendreIntegral________ = fGaussLegendreIntegral( (plotInvervalStart-1)  , a, b, @log );
# gaussLegendreIntegralEstimada = fGaussLegendreIntegral( (plotInvervalStart-1)*2, a, b, @log );

lastError = abs( gaussLegendreIntegral________ + 1 );

for m = plotInvervalStart : plotInvervalEnd

    gaussLegendreIntegral________ = fGaussLegendreIntegral( m  , a, b, @log );
    # gaussLegendreIntegralEstimada = fGaussLegendreIntegral( m*2, a, b, @log );

    gaussLegendreIntegralErroEstimadoY(end+1) = abs( gaussLegendreIntegral________ + 1 );
    errorGrowth(end+1)                        = abs( gaussLegendreIntegralErroEstimadoY(end) - lastError );

    lastError = gaussLegendreIntegralErroEstimadoY(end);
    printf( "m = %2d, Error = %20.16f, Error Growth: %f20.16\n", m, gaussLegendreIntegralErroEstimadoY(end), errorGrowth(end) )

end


figure(3);
hold all;
grid on;

plot( plotInvervalStart : 1 : plotInvervalEnd, gaussLegendreIntegralErroEstimadoY, '-k', 'LineWidth', 2 );
legendText2(end+1) = { 'gaussLegendreIntegralErroEstimadoY' };

plot( plotInvervalStart : 1 : plotInvervalEnd, errorGrowth, '-b', 'LineWidth', 2 );
legendText2(end+1) = { 'errorGrowth' };

legend(legendText2,'location','north');
hold off;





