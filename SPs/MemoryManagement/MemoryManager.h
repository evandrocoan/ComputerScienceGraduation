/*
 * File:   MemoryManager.h
 * Authors: INSERT YOUR NAME HERE
 * Strategy: INSERT THE MEMORY MANAGEMENT SCHEMA HERE (THE ALGORITHM YOU ARE IMPLEMENTING -- RANDOMLY GENERATED BY MOODLE AS A VARIATION)
 *
 * Created on ...
 */

#ifndef MEMORYMANAGER_H
#define	MEMORYMANAGER_H
#include <set>


class Partition
{
public:

    Partition(unsigned int beginAddress, unsigned int endAddress, bool isFree) {
        _beginAddress = beginAddress;
        _endAddress = endAddress;
        _isFree = isFree;
    }
public: // do not change

    unsigned int getBeginAddress() const {
        return _beginAddress;
    }

    unsigned int getEndAddress() const {
        return _endAddress;
    }

    unsigned int getLength() const {
        return _endAddress - _beginAddress + 1;
    }
private: // do not change
    unsigned int _beginAddress;
    unsigned int _endAddress;
    bool _isFree;
private:
    // INSERT YOUR CODE HERE
    // ...
public:
    bool operator<(const Partition& p)const{
        return this->_beginAddress < p._beginAddress;
    }
};



typedef std::set<Partition*, bool (*)(Partition*,Partition*)> PartitionList;


enum MemoryAllocationAlgorithm {FirstFit, NextFit, BestFit, WorstFit};

class Algorithm;



class MemoryManager {
public: // do not change
    MemoryManager(MemoryAllocationAlgorithm algorithm);
    MemoryManager(const MemoryManager& orig);
    virtual ~MemoryManager();
    
public: // do not change
    Partition* allocateMemory(unsigned int size);
    void deallocateMemory(Partition* partition);
    void showMemory();
    unsigned int getNumPartitions();
    Partition* getPartition(unsigned int index);
    
    
    
    ///extens√£o de classe na marra
    
protected: // private attributes and methods
    PartitionList partitions;
    Algorithm* functions;
    MemoryAllocationAlgorithm algorithm;
    
    friend Algorithm;
public:
  const unsigned int maxAddress=0;
    
};



struct Algorithm
{
    /**
     * Creates the memory allocation algorithm cumbersome high tight strategy
     * object.
     * 
     * @param memoryManager    an MemoryManager class object
     */
    Algorithm(MemoryManager* memoryManager);
    
    ~Algorithm();
    PartitionList* getPartitions();
    virtual Partition* allocateMemory( unsigned int size ) = 0;
    
    
protected:
    
    MemoryManager* memoryManager;
    
};



struct _FirstFit: public Algorithm
{
    using::Algorithm::Algorithm;
    
    virtual Partition* allocateMemory(unsigned int size);

};

struct _NextFit: public Algorithm
{
    using::Algorithm::Algorithm;
    
    virtual Partition* allocateMemory(unsigned int size);
    private:
    int lastIndex=0;
 
};

struct _WorstFit: public Algorithm
{
    using::Algorithm::Algorithm;
    
    virtual Partition* allocateMemory(unsigned int size);
     
};

struct _BestFit: public Algorithm
{
    using::Algorithm::Algorithm;
    
    virtual Partition* allocateMemory(unsigned int size);

};



#endif	/* MEMORYMANAGER_H */

