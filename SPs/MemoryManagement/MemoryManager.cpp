/*
 * File:   MemoryManager.cpp
 * Authors: INSERT YOUR NAME HERE
 * Strategy: INSERT THE MEMORY MANAGEMENT SCHEMA HERE (THE ALGORITHM YOU ARE IMPLEMENTING -- RANDOMLY GENERATED BY MOODLE AS A VARIATION)
 *
 * Created on ...
 */


#include "Debug.h"
#include "MemoryManager.h"
#include "Simulator.h"
#include "Traits.h"

#include <iostream>


MemoryManager::MemoryManager(MemoryAllocationAlgorithm algorithm) {
   // INSERT TOUR CODE HERE
   ...
}

MemoryManager::MemoryManager(const MemoryManager& orig) {
}

MemoryManager::~MemoryManager() {
}

Partition* MemoryManager::allocateMemory(unsigned int size) {
    Debug::cout(Debug::Level::trace, "MemoryManager::allocateMemory(" + std::to_string(size) + ")");
    // INSERT YOUR CODE TO ALLOCATE MEMOTY FOR THE PROCESS
    // ...
    
    return nullptr; // CHANGE TO THE CORRET RETURN VALUE
}

void MemoryManager::deallocateMemory(Partition* partition) {
    Debug::cout(Debug::Level::trace, "MemoryManager::deallocateMemory(" + std::to_string(reinterpret_cast<unsigned long> (partition)) + ")");
    // INSERT YOUR CODE TO DEALLOCATE MEMORY OF THE PROCESS
    // ...
}

unsigned int MemoryManager::getNumPartitions() {
    // INSERT YOUR CODE TO RETURN THE QUANTITY OF PARTITIONS
    // ...
}

Partition* MemoryManager::getPartition(unsigned int index) {
    // INSERT YOUR CODE TO RETURN THE PARTITION AT INDEX index
    // ...

    return 0; // CHANGE TO THE CORRET RETURN VALUE
}

void MemoryManager::showMemory() {
    // INSERT YOUR CODE TO SHOW THE MEMORY MAP, IN THE FOLLOWING FORMAT
    // <beginAddress>-<endAddress>: <FREE|ALLOCATED> <size>
    
    // Exemplo:
    /*
      0-1499:FREE 1500
      1500-1999:ALLOCATED 500
      2000-2999:ALLOCATED 1000
      3000-9999:FREE 7000
      10000-19999:ALLOCATED 10000
      20000-1000000:FREE 800000
    */

    // INSERT YOUR CODE TO SHOW THE MEMORY MAP
    // ...
}

