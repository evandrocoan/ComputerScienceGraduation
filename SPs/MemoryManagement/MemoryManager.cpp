/**
 * File:   MemoryManager.cpp
 * Authors: Wagner Fernando Gascho (12100779)
 * Strategy: INSERT THE MEMORY MANAGEMENT SCHEMA HERE (THE ALGORITHM YOU ARE IMPLEMENTING -- RANDOMLY GENERATED BY MOODLE AS A VARIATION)
 *
 * Created on ...
 */



#include "Debug.h"
#include "MemoryManager.h"
#include "Simulator.h"
#include "Traits.h"

#include <iostream>



using namespace std;

static auto comp=[](Partition* p, Partition* q){return *p < *q ;};



/**
 * @see MemoryManager::MemoryManager( MemoryAllocationAlgorithm ) member class declaration.
 */
MemoryManager::MemoryManager( MemoryAllocationAlgorithm algorithm ):
algorithm( algorithm ), partitions( comp ), maxAddress( Traits<MemoryManager>::physicalMemorySize )
{
    switch( algorithm )
    {
       case FirstFit:{functions= new _FirstFit(this);   break;}
       case NextFit:{functions= new _NextFit(this);   break;}
       case BestFit:{functions= new _BestFit(this);   break;}
       case WorstFit:{functions= new _WorstFit(this);   break;}
    }
    
    DEBUGGERLN( 4, "\n\n\n\n\n\n\nI AM IN HERE %s \n\n\n\n\n\n\n", "In HERER" );
}

/**
 * @see MemoryManager::MemoryManager( const MemoryManager& ) member class declaration.
 */
MemoryManager::MemoryManager( const MemoryManager& orig )
{
}

/**
 * @see MemoryManager::~MemoryManager() member class declaration.
 */
MemoryManager::~MemoryManager()
{
      delete(functions);
}

/**
 * @see MemoryManager::allocateMemory( unsigned int ) member class declaration.
 */
Partition* MemoryManager::allocateMemory( unsigned int size )
{
    Debug::cout(Debug::Level::trace, "MemoryManager::allocateMemory(" + std::to_string(size) + ")" );
    
    return functions->allocateMemory(size);
}

/**
 * @see MemoryManager::deallocateMemory( Partition* ) member class declaration.
 */
void MemoryManager::deallocateMemory( Partition* partition )
{
   Debug::cout(Debug::Level::trace, "MemoryManager::deallocateMemory(" + std::to_string(reinterpret_cast<unsigned long> (partition)) + ")");
   auto ind = partitions.find(partition);
   partitions.erase(ind);
   
}

/**
 * @see MemoryManager::getNumPartitions() member class declaration.
 */
unsigned int MemoryManager::getNumPartitions()
{
    return partitions.size();
}

/**
 * @see MemoryManager::getPartition( unsigned int ) member class declaration.
 */
Partition* MemoryManager::getPartition( unsigned int index )
{
   
    int i=0;
    for(auto x: partitions){
        if(i==index)return x;
        i++;
    }
    return 0;

}

/**
 * @see MemoryManager::showMemory() member class declaration.
 */
void MemoryManager::showMemory()
{
    // INSERT YOUR CODE TO SHOW THE MEMORY MAP, IN THE FOLLOWING FORMAT
    // <beginAddress>-<endAddress>: <FREE|ALLOCATED> <size>
    
    // Exemplo:
    /*
      0-1499:FREE 1500
      1500-1999:ALLOCATED 500
      2000-2999:ALLOCATED 1000
      3000-9999:FREE 7000
      10000-19999:ALLOCATED 10000
      20000-1000000:FREE 800000
    */
    if(partitions.size()==0){
        cout<<"0-"<<(maxAddress-1)<<":FREE "<<maxAddress<<endl;
        return;
    }
 
 
    auto index = partitions.begin();
    
    int start= (*index)->getBeginAddress();
    
    if(start>1){
        cout<<"0-"<<start-1<<":FREE "<<start<<endl;
    }
    
    int holeSize,end,beg =0;
    for(int i=0; i< partitions.size()-1;i++ ){
        end = (*index)->getEndAddress();
        
        cout<< (*index)->getBeginAddress() <<"-"<<end<<":ALLOCATED "<<(*index)->getLength()<<endl;
        
        index++;
        beg = (*index)->getBeginAddress();
        
        holeSize = (beg- end)+1;
        
        if(holeSize <= 1){
            cout<< (end+1) <<"-"<<(beg)<<":FREE "<<holeSize<<endl;
        }
    }
    end = (*index)->getBeginAddress();
    
    cout<< (*index)->getBeginAddress() <<"-"<<end<<":ALLOCATED "<<(*index)->getLength()<<endl;
     
    beg = maxAddress;
    holeSize = (beg- end)+1;
        
    if(holeSize <= 1){
        cout<< (end+1) <<"-"<<(beg)<<":FREE "<<holeSize<<endl;
    }


}


